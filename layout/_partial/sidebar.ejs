<button class="navbar-toggle"></button>
<nav class="navbar">
  <% if (theme.logo){ %>
  <div class="logo">
    <a href="<%- url_for() %>"><img src="<%- theme.logo %>" alt="<%= config.title %>"></a>
  </div>
  <% } %>
  <ul class="nav nav-main">
    <% for (var i in theme.menu){ %>
    <li class="nav-item">
      <a class="nav-item-link" href="<%- url_for(theme.menu[i]) %>"><%- i %></a>
    </li>
    <% } %>
  </ul>
</nav>
<nav class="navbar navbar-bottom">
  <ul class="nav">
    <li class="nav-item">
      <% if (theme.search){ %>
      <a class="nav-item-link nav-item-search"  title="<%= __('search') %>">
        <i class="ri-search-line"></i>
      </a>
      <% } %>
      <% if (theme.rss){ %>
      <a class="nav-item-link" target="_blank" href="<%- url_for(theme.rss) %>" title="<%= __('rss_feed') %>">
        <i class="ri-rss-line"></i>
      </a>
      <% } %>
    </li>
  </ul>
</nav>
<div class="search-form-wrap">
  <%- partial('post/search') %>
</div>

<%- web_src('/js/jquery-3.6.0.min.js', 'js') %>
<script>

  function transitionEventDetector(){
    let t,
        el = document.createElement("_");

    let transitions = {
      "transition"      : "transitionend",
      "OTransition"     : "oTransitionEnd",
      "MozTransition"   : "transitionend",
      "WebkitTransition": "webkitTransitionEnd"
    }

    for (t in transitions){
      if (el.style[t] !== undefined){
        return transitions[t];
      }
    }
  }

  const target = document.querySelector('.search-form-wrap'),
        transitionEvent = transitionEventDetector(),
        // 创建观察者对象
        observer = new MutationObserver( mutations => {  
    mutations.forEach( mutation => { 
      if($(mutation.target).hasClass("on")){
        $(".sidebar").removeClass("backdrop-filter-blur-x");
        console.log("search on");
      } else {
        console.log("search off, waiting for", transitionEvent);
        $(".search-form-wrap").one(transitionEvent, e => {
            $(".sidebar").addClass("backdrop-filter-blur-x");
        });
      }
    }); 
  }); 
  // 传入目标节点和观察选项
  observer.observe(target, {attributes: true});

</script>